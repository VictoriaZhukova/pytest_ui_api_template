import os
import pytest
import requests
from dotenv import load_dotenv

load_dotenv()

BASE_URL = os.getenv("KINOPOISK_API_URL", "https://api.kinopoisk.dev/v1.4")
API_KEY = os.getenv("KINOPOISK_API_KEY")

HEADERS = {
    "X-API-KEY": API_KEY,
    "Content-Type": "application/json"
}

if not API_KEY:
    raise EnvironmentError("‚ùå –£–∫–∞–∂–∏—Ç–µ KINOPOISK_API_KEY –≤ —Ñ–∞–π–ª–µ .env")


class TestKinopoiskAPIChecklist:

    def test_search_movie_cyrillic_success(self):
        """
        [–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π ‚Ññ1] –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ ‚Üí 200 OK
        –ü—Ä–∏–º–µ—Ä: query=–°—É–º–µ—Ä–∫–∏
        """
        query = "–°—É–º–µ—Ä–∫–∏"
        url = f"{BASE_URL}/movie/search"
        params = {"page": 1, "limit": 10, "query": query}

        response = requests.get(url, headers=HEADERS, params=params)

        assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        json_data = response.json()

        assert "docs" in json_data, "–ù–µ—Ç –ø–æ–ª—è 'docs'"
        assert len(json_data["docs"]) > 0, "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"
        assert any(query in doc.get("name", "") for doc in json_data["docs"]), "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"

    def test_search_movie_latin_success(self):
        """
        [–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π ‚Ññ2] –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ ‚Üí 200 OK
        –ü—Ä–∏–º–µ—Ä: query=Twilight
        """
        query = "Twilight"
        url = f"{BASE_URL}/movie/search"
        params = {"page": 1, "limit": 10, "query": query}

        response = requests.get(url, headers=HEADERS, params=params)

        assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        json_data = response.json()

        assert "docs" in json_data, "–ù–µ—Ç –ø–æ–ª—è 'docs'"
        assert len(json_data["docs"]) > 0, "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"
        assert any(query.lower() in doc.get("name", "").lower() for doc in json_data["docs"]), "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    def test_search_movie_by_id_success(self):
        """
        [–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π ‚Ññ3] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ ID ‚Üí 200 OK
        –ü—Ä–∏–º–µ—Ä: movie/401177
        """
        movie_id = 401177
        url = f"{BASE_URL}/movie/{movie_id}"

        response = requests.get(url, headers=HEADERS)

        assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        json_data = response.json()

        assert json_data.get("id") == movie_id, "ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
        assert "name" in json_data and isinstance(json_data["name"], str), "–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"

    def test_search_movie_with_emoji_returns_400(self):
        """
        [–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π ‚Ññ4] –ü–æ–∏—Å–∫ —Å —ç–º–æ–¥–∑–∏ üòÅ ‚Üí 400 Bad Request
        query=%F0%9F%98%81
        """
        emoji_encoded = "%F0%9F%98%81"  # üòÅ
        url = f"{BASE_URL}/movie/search?page=1&limit=10&query={emoji_encoded}"

        response = requests.get(url, headers=HEADERS)

        assert response.status_code == 400, f"–û–∂–∏–¥–∞–ª—Å—è 400, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        assert "message" in response.json(), "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"

    def test_search_movie_with_1000_symbols_returns_404(self):
        """
        [–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π ‚Ññ5] –ü–æ–∏—Å–∫ —Å 1000 —Å–∏–º–≤–æ–ª–æ–≤ ‚Üí 404 Not Found
        """
        long_query = "A" * 1000
        url = f"{BASE_URL}/movie/search"
        params = {"page": 1, "limit": 10, "query": long_query}

        response = requests.get(url, headers=HEADERS, params=params)

        assert response.status_code == 404, f"–û–∂–∏–¥–∞–ª—Å—è 404, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        assert "message" in response.json(), "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"